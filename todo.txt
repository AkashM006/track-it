TODO:

Planned:
Week 4: ( Sep 10 - Sep 16 ) ( Did nothing ) ( Excuse: Had family function ) :-)
1. Create UI for login and register routes ( DONE )
2. Integrate login and register

Week 3: ( Sep 3 - Sep 9 ) ( Did nothing ) ( Excuse: Had family function ) :-)
1. Create UI for login and register routes
2. Integrate login and register using jwt authentication

Week 2: ( Aug 27 - Sep 2 )
1. Integration with backend once that is complete ( DONE )

For Later:
1. Defer loading of expense modal form
2. Convert expense amount to use decimal js and create new pipes to display them or just do learn how to show as currency and change the total expense logic
3. Setup a loading state in places where Api is used; ( DONE )
    - Getting all expenses
    - Getting all categories
    - Creating new expense
    - Updating expense
    - Deleting expense
4. Setup import alias
5. Error handling in service level and UI level: ( DONE )
    - Getting all expenses
    - Getting all categories
    - Creating new expense
    - Updating expense
    - Deleting expense
6. Removed icons in categories, UI change required for form ( DONE )
7. Using some kind of state management solution
8. When clicking delete modal is opening ( DONE )
9. Add category selection validation as well in form-modal ( DONE )
10. Change useMutation to return getters instead of direct signal
11. Move form reseting line to ts file and call it only when success ( DONE )
12. Adding to expenses reactively only if all the expenses are loaded, this must be changed
13. In form selected category must null or a category, also must be validated properly ( DONE )
14. expenses-list also uses categories. Provide a solution. Must be fetched only in one place. 2 approaches:
    - Combine to single api calls with all categories and all expenses for home page
    - Add another api call and persist it so that other components can also use it
15. Implement a not found route
16. Change Observable implementation to Promise and use signals